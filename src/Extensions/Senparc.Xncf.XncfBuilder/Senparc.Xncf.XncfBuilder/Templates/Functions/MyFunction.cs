// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 16.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Senparc.Xncf.XncfBuilder.Templates.Functions
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Senparc项目\NeuCharFramework\NcfPackageSources\src\Extensions\Senparc.Xncf.XncfBuilder\Senparc.Xncf.XncfBuilder\Templates\Functions\MyFunction.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class MyFunction : MyFunctionBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using Senparc.Ncf.XncfBase;\r\nusing Senparc.Ncf.XncfBase.Functions;\r\nusing System;" +
                    "\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\nus" +
                    "ing System.IO;\r\nusing System.Linq;\r\n\r\nnamespace ");
            
            #line 15 "E:\Senparc项目\NeuCharFramework\NcfPackageSources\src\Extensions\Senparc.Xncf.XncfBuilder\Senparc.Xncf.XncfBuilder\Templates\Functions\MyFunction.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OrgName));
            
            #line default
            #line hidden
            this.Write(".Xncf.");
            
            #line 15 "E:\Senparc项目\NeuCharFramework\NcfPackageSources\src\Extensions\Senparc.Xncf.XncfBuilder\Senparc.Xncf.XncfBuilder\Templates\Functions\MyFunction.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(XncfName));
            
            #line default
            #line hidden
            this.Write(".Functions\r\n{\r\n       public class MyFunction : FunctionBase\r\n    {\r\n        publ" +
                    "ic MyFunction(IServiceProvider serviceProvider) : base(serviceProvider)\r\n       " +
                    " {\r\n        }\r\n\r\n        public class Parameters : IFunctionParameter\r\n        {" +
                    "\r\n            [Required]\r\n            [MaxLength(50)]\r\n            [Description(" +
                    "\"名称||双竖线之前为参数名称，双竖线之后为参数注释\")]\r\n            public string Name { get; set; }\r\n\r\n " +
                    "           [Required]\r\n            [Description(\"数字||数字1\")]\r\n            public " +
                    "int Number1 { get; set; }\r\n\r\n\r\n            [Required]\r\n            [Description(" +
                    "\"数字||数字2\")]\r\n            public int Number2 { get; set; }\r\n\r\n            [Descri" +
                    "ption(\"运算符||\")]//下拉列表\r\n            public SelectionList Operator { get; set; } =" +
                    " new SelectionList(SelectionType.DropDownList, new[] {\r\n                 new Sel" +
                    "ectionItem(\"+\",\"加法\",\"数字1 + 数字2\",false),\r\n                 new SelectionItem(\"-\"," +
                    "\"减法\",\"数字1 - 数字2\",true),\r\n                 new SelectionItem(\"×\",\"乘法\",\"数字1 × 数字2\"" +
                    ",false),\r\n                 new SelectionItem(\"÷\",\"除法\",\"数字1 ÷ 数字2\",false)\r\n      " +
                    "      });\r\n\r\n            [Description(\"计算平方||\")]//多选框\r\n            public Select" +
                    "ionList Power { get; set; } = new SelectionList(SelectionType.CheckBoxList, new[" +
                    "] {\r\n                 new SelectionItem(\"2\",\"平方\",\"计算上述结果之后再计算平方\",false),\r\n      " +
                    "           new SelectionItem(\"3\",\"三次方\",\"计算上述结果之后再计算三次方\",false)\r\n            });\r" +
                    "\n        }\r\n\r\n\r\n        public override string Name => \"我的函数\";\r\n\r\n        public" +
                    " override string Description => \"我的函数的注释\";\r\n\r\n        public override Type Funct" +
                    "ionParameterType => typeof(Parameters);\r\n\r\n        public override FunctionResul" +
                    "t Run(IFunctionParameter param)\r\n        {\r\n            return FunctionHelper.Ru" +
                    "nFunction<Parameters>(param, (typeParam, sb, result) =>\r\n            {\r\n        " +
                    "        /* 页面上点击“执行”后，将调用这里的方法\r\n                 *\r\n                 * 参数说明：\r\n  " +
                    "               * param：IFunctionParameter 类型对象\r\n                 * typeParam：");
            
            #line 69 "E:\Senparc项目\NeuCharFramework\NcfPackageSources\src\Extensions\Senparc.Xncf.XncfBuilder\Senparc.Xncf.XncfBuilder\Templates\Functions\MyFunction.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OrgName));
            
            #line default
            #line hidden
            this.Write(".Xncf.");
            
            #line 69 "E:\Senparc项目\NeuCharFramework\NcfPackageSources\src\Extensions\Senparc.Xncf.XncfBuilder\Senparc.Xncf.XncfBuilder\Templates\Functions\MyFunction.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(XncfName));
            
            #line default
            #line hidden
            this.Write(".MyFunction.Parameters 类型对象\r\n                 * sb：日志\r\n                 * result：" +
                    "返回结果\r\n                 */\r\n\r\n                double calcResult = typeParam.Numbe" +
                    "r1;\r\n                var theOperator = typeParam.Operator.SelectedValues.FirstOr" +
                    "Default();\r\n                switch (theOperator)\r\n                {\r\n           " +
                    "         case \"+\":\r\n                        calcResult = calcResult + typeParam." +
                    "Number2;\r\n                        break;\r\n                    case \"-\":\r\n       " +
                    "                 calcResult = calcResult - typeParam.Number2;\r\n                 " +
                    "       break;\r\n                    case \"×\":\r\n                        calcResult" +
                    " = calcResult * typeParam.Number2;\r\n                        break;\r\n            " +
                    "        case \"÷\":\r\n                        if (typeParam.Number2 == 0)\r\n        " +
                    "                {\r\n                            result.Success = false;\r\n        " +
                    "                    result.Message = \"被除数不能为0！\";\r\n                            re" +
                    "turn;\r\n                        }\r\n                        calcResult = calcResul" +
                    "t / typeParam.Number2;\r\n                        break;\r\n                    defa" +
                    "ult:\r\n                        result.Success = false;\r\n                        r" +
                    "esult.Message = $\"未知的运算符：{theOperator}\";\r\n                        return;\r\n     " +
                    "           }\r\n\r\n                sb.AppendLine($\"进行运算：{typeParam.Number1} {theOpe" +
                    "rator} {typeParam.Number2} = {calcResult}\");\r\n\r\n                Action<int> rais" +
                    "ePower = power =>{\r\n                    if (typeParam.Power.SelectedValues.Conta" +
                    "ins(power.ToString()))\r\n                    {\r\n                        var oldVa" +
                    "lue = calcResult;\r\n                        calcResult =  Math.Pow(calcResult, po" +
                    "wer);\r\n                        sb.AppendLine($\"进行{power}次方运算：{oldValue}{(power =" +
                    "= 2 ? \"²\" : \"³\")} = {calcResult}\");\r\n                    }\r\n                };\r\n" +
                    "\r\n                raisePower(2);\r\n                raisePower(3);\r\n\r\n            " +
                    "    result.Message = $\"计算结果：{calcResult}。计算过程请看日志\";\r\n            });\r\n        }\r" +
                    "\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class MyFunctionBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
